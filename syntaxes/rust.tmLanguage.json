{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Rust",
  "fileTypes": [
    "rs"
  ],
  "scopeName": "source.rust",
  "patterns": [
    {
      "comment": "documentation comments",
      "name": "comment.line.documentation.rust",
      "match": "^\\s*///.*"
    },
    {
      "comment": "line comments",
      "name": "comment.line.double-slash.rust",
      "match": "\\s*//.*"
    },
    {
      "comment": "control flow keywords",
      "name": "keyword.control.rust",
      "match": "\\b(abstract|as|async|await|become|box|break|const|continue|do|dyn|else|enum|extern|false|final|for|if|impl|in|let|loop|macro|match|mod|move|override|priv|pub|ref|return|static|struct|trait|true|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b"
    },
    {
      "comment": "fn",
      "name": "keyword.control.fn.rust",
      "match": "\\bfn\\b"
    },
    {
      "comment": "crate",
      "name": "keyword.other.crate.rust",
      "match": "\\bcrate\\b"
    },
    {
      "comment": "mut",
      "name": "keyword.other.mut.rust",
      "match": "\\bmut\\b"
    },
    {
      "comment": "super",
      "name": "keyword.other.super.rust",
      "match": "\\bsuper\\b"
    },
    {
      "comment": "namespace operator (::)",
      "name": "keyword.operator.namespace.rust",
      "match": "::"
    },
    {
      "comment": "double-quoted strings and byte strings",
      "name": "string.quoted.double.rust",
      "begin": "(b?)(\")",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.byte.raw.rust"
        },
        "2": {
          "name": "punctuation.definition.string.rust"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.rust"
        }
      },
      "patterns": [
        {
          "include": "#escapes"
        },
        {
          "include": "#interpolations"
        }
      ]
    },
    {
      "comment": "double-quoted raw strings and raw byte strings",
      "name": "string.quoted.double.rust",
      "begin": "(b?r)(#*)(\")",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.byte.raw.rust"
        },
        "2": {
          "name": "punctuation.definition.string.raw.rust"
        },
        "3": {
          "name": "punctuation.definition.string.rust"
        }
      },
      "end": "(\")(#*)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.rust"
        },
        "2": {
          "name": "punctuation.definition.string.raw.rust"
        }
      }
    },
    {
      "comment": "characters and bytes",
      "name": "string.quoted.single.char.rust",
      "begin": "(b)?(')",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.byte.raw.rust"
        },
        "2": {
          "name": "punctuation.definition.char.rust"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.char.rust"
        }
      },
      "patterns": [
        {
          "include": "#escapes"
        }
      ]
    },
    {
      "comment": "self",
      "name": "variable.language.self.rust",
      "match": "\\b[Ss]elf\\b"
    },
    {
      "comment": "decimal integers and floats",
      "name": "constant.numeric.decimal.rust",
      "match": "\\b\\d[\\d\\._]*(E([+-])\\d+)?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.exponent.rust"
        },
        "2": {
          "name": "keyword.operator.math.exponent.rust"
        },
        "3": {
          "name": "entity.name.type.numeric.rust"
        }
      }
    },
    {
      "comment": "hexadecimal integers",
      "name": "constant.numeric.hex.rust",
      "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
      "captures": {
        "1": {
          "name": "entity.name.type.numeric.rust"
        }
      }
    },
    {
      "comment": "octal integers",
      "name": "constant.numeric.oct.rust",
      "match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
      "captures": {
        "1": {
          "name": "entity.name.type.numeric.rust"
        }
      }
    },
    {
      "comment": "binary integers",
      "name": "constant.numeric.bin.rust",
      "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
      "captures": {
        "1": {
          "name": "entity.name.type.numeric.rust"
        }
      }
    },
    {
      "comment": "numeric types",
      "name": "entity.name.type.numeric",
      "match": "(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)"
    }
  ],
  "repository": {
    "escapes": {
      "comment": "escapes: ASCII, byte, Unicode, quote, regex",
      "name": "constant.character.escape.rust",
      "match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
      "captures": {
        "1": {
          "name": "constant.character.escape.backslash.rust"
        },
        "2": {
          "name": "constant.character.escape.bit.rust"
        },
        "3": {
          "name": "constant.character.escape.unicode.rust"
        },
        "4": {
          "name": "constant.character.escape.unicode.punctuation.rust"
        },
        "5": {
          "name": "constant.character.escape.unicode.punctuation.rust"
        }
      }
    },
    "interpolations": {
      "comment": "curly brace interpolations",
      "name": "meta.interpolation.rust",
      "begin": "{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.interpolation.rust"
        }
      },
      "end": "}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.interpolation.rust"
        }
      }
    }
  }
}