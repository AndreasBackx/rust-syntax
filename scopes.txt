This is a temporary file to help me track scopes to include.

comments
  d comment.line.documentation.rust
    ///
  d comment.line.double-slash.rust
    //

keywords
  keyword.control.rust
    abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|false|final|for|if|impl|in|let|loop|macro|match|mod|move|override|priv|pub|ref|return|self|Self|static|struct|super|trait|true|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield
  keyword.operator.math.rust
    +, -, %
  keyword.operator.namespace.rust
    ::
  keyword.operator.borrow.rust
    &
    tricky, because && can serve 2 purposes
    see: https://doc.rust-lang.org/reference/expressions/operator-expr.html
  keyword.operator.rust

just run the tokens: https://doc.rust-lang.org/reference/tokens.html

strings
  d punctuation.definition.string.begin/end.rust
    "
  d string.quoted.double.rust
    "content"
  d punctuation.definition.char.begin/end.rust
   '
  d string.quoted.single.char.rust
    'content' (includes unicode stuff like U+10FFFF)
  d raw string
    r#"hello"# NOTE: can have multiple # but the number must be balanced
  d byte
    b'H'
  d byte string
    b"hello"
  d raw byte string
    br#"hello"# NOTE: can have multiple # but the number must be balanced

escapes
  ASCII escapes
    \x41	7-bit character code (exactly 2 digits, up to 0x7F)
    \n	Newline
    \r	Carriage return
    \t	Tab
    \\	Backslash
    \0	Null
  Byte escapes
    \x7F	8-bit character code (exactly 2 digits)
    \n	Newline
    \r	Carriage return
    \t	Tab
    \\	Backslash
    \0	Null
  Unicode escapes
    \u{7FFF}	24-bit Unicode character code (up to 6 digits)
  Quote escapes
    \'	Single quote
    \"	Double quote

(0x|0o|0b)?
([\d\._]+)
(((E)([+-]))(\d)+)?

numbers
  Decimal integer	98_222
  Hex integer	0xff
  Octal integer	0o77
  Binary integer	0b1111_0000
  Floating-point	123.0E+77
  * All number literals allow _ as a visual separator: 1_234.0E+18f64

types - consider: built-in types as storage.type and user + generic 'types as entity.name.type
  entity.name.type.numeric.rust
    i32
  entity.name.type.numeric.rust
    f64
  entity.name.type.bool.rust
    bool
  entity.name.type.char.rust
    char

constants
  constant.language.bool.rust
    true
  constant.numeric.literal.int.rust
    22_000, 0xff...
  constant.numeric.literal.float.rust
    2.0

variables
  variable.parameter.rust
    some_func(param, param) - layered on func definition or call

metas
  meta.variable.binding.rust
   let x =
  meta.function.definition.rust
   fn main()
  meta.function.call.rust
    some_func(a, b)
  meta.compound.tuple.rust
    (1, 2, 3)
  meta.access.dot.rust
    x.1
  meta.compound.array.rust
    [1, 2, 3]
  meta.access.index.rust
   x[1]
  meta.compound.vec.rust
    vec![1, 2, 3]


punctuation (not covered above)
