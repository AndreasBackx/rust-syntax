$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: Rust
fileTypes:
  - rs
scopeName: source.rust
patterns:
  # comments
  -
    comment: documentation comments
    name: comment.line.documentation.rust
    match: ^\s*///.*
  -
    comment: line comments
    name: comment.line.double-slash.rust
    match: ^\s*//.*
  # keywords
  # keyword.control
  -
    comment: control flow keywords
    name: keyword.control.rust
    match: \b(abstract|as|async|await|become|box|break|const|continue|do|dyn|else|enum|extern|false|final|for|if|impl|in|let|loop|macro|match|mod|move|override|priv|pub|ref|return|static|struct|trait|true|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b
  -
    comment: fn
    name: keyword.control.fn.rust
    match: \bfn\b
  # keyword.other
  -
    comment: crate
    name: keyword.other.crate.rust
    match: \bcrate\b
  -
    comment: mut
    name: keyword.other.mut.rust
    match: \bmut\b
  -
    comment: super
    name: keyword.other.super.rust
    match: \bsuper\b
  # keyword.operator
  -
    comment: namespace operator (::)
    name: keyword.operator.namespace.rust
    match: '::'
  # strings
  -
    comment: double-quoted strings, raw strings, and byte strings
    name: string.quoted.double.rust
    begin: '(b?r(#))?(")'
    beginCaptures:
      1:
        name: string.quoted.byte.raw.rust
      2:
        name: punctuation.definition.string.raw.rust
      3:
        name: punctuation.definition.string.begin.rust
    end: '"'
    endCaptures:
      0:
        name: punctuation.definition.string.end.rust
    patterns:
      - include: '#escapes'
      - include: '#interpolations'
  -
    comment: characters and bytes
    name: string.quoted.single.char.rust
    begin: "(b)?(')"
    beginCaptures:
      1:
        name: string.quoted.byte.raw.rust
      2:
        name: punctuation.definition.char.begin.rust
    end: "'"
    endCaptures:
      0:
        name: punctuation.definition.char.end.rust
    patterns:
      - include: '#escapes'
  # variables
  -
    comment: self
    name: variable.language.self.rust
    match: \b[Ss]elf\b
  # constants
  -
    comment: decimal numbers
    name: constant.numeric.decimal.rust
    match: \b\d[\d\._]*(E([+-])\d+)?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\b
    captures:
      1:
        name: constant.numeric.decimal.exponent.rust
      2:
        name: keyword.operator.math.exponent.rust
      3:
        name: entity.name.type.numeric.rust
  # -
  #   comment: hexadecimal numbers
  #   name: constant.numeric.hex.rust
  #   match: \b0x\b
  # - comment
  # -
  #   comment: 'numbers: decimal, hex, octal, binary, floating'
  #   name: constant.numeric.rust
  #   match: (0(?:b|o|x))?(?:[\d]+[\d\._a-fA-F]*)(E([+-])\d+)?
  #   captures:
  #     1:
  #       name: constant.numeric.literal.rust
  #     2:
  #       name: constant.numeric.literal.exponent.rust
  #     3:
  #       name: keyword.operator.math.exponent.rust

  # types
  -
    comment: numeric types
    name: entity.name.type.numeric
    match: (f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)

repository:
  escapes:
    comment: 'escapes: ASCII, byte, Unicode, quote, regex'
    name: constant.character.escape.rust
    match: (\\)(?:(?:((x)[0-7][0-7a-fA-F])|(u(\{)[\da-fA-F]{4,6}(\}))|.))
    captures:
      1:
        name: constant.character.escape.backslash.rust
      2:
        name: constant.character.escape.bit.rust
      3:
        name: constant.character.escape.bit.x.rust
      4:
        name: constant.character.escape.unicode.rust
      5:
        name: constant.character.escape.unicode.punctuation.rust
      6:
        name: constant.character.escape.unicode.punctuation.rust
  interpolations:
    comment: curly brace interpolations
    name: meta.interpolation.rust
    begin: '{'
    beginCaptures:
      0:
        name: punctuation.definition.interpolation.rust
    end: '}'
    endCaptures:
      0:
        name: punctuation.definition.interpolation.rust

# plain comments //
# documentation comments ///
# that #[stuff] should have its own scope, it's comment-like

# keywords for control flow
# keyword operators
# special keywords like crate

# true declared constants
# numeric constants, unicode values, hex, octal, binary
# language constants - self or __module__-like things
